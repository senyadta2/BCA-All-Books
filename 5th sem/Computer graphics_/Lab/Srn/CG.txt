DDA

#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<graphics.h>
void main ()
{
int x,y,x1,y1,i;
float m,dx,dy;
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
printf("Enter starting point:");
scanf("%d%d",&x,&y);
printf("Enter the cordinate of End point:");
scanf("%d%d", &x1,&y1);
dx= abs(x1-x);
dy= abs(y1-y);
m=dy/dx;
if (m>1.0)
{
 while(y<=y1)
{
putpixel(x,y,RED);
x=x+(1/m);
y=y+1.0;
}
}
else
{
while (x<=x1)
{
putpixel(x,y,RED);
y=y+m;
x=x+1.0;
}
}
getch();
closegraph();
}

Mid-point circle

#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<dos.h>

void draw_circle(int xc,int yc, int r){
int x,y,p;
x=0;
y=r;
p=1-r;
while(x<=y){
putpixel(xc+x,yc+y,5);
putpixel(xc-y,yc-x,5);
putpixel(xc+y,yc-x,5);
putpixel(xc-y,yc+x,5);
putpixel(xc+y,yc+x,5);
putpixel(xc-x,yc-y,5);
putpixel(xc+x,yc-y,5);
putpixel(xc-x,yc+y,5);
delay(100);
if(p<0){
p=p+(2*(x+1))+1;
x++;
}
else{
p=p+(2*(x+1))-(2*(y+1))+1;
x++;
y--;
}
}
getch();
}

void main(){
int gd =DETECT, gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
int xc,yc,r;
printf("Enter the value of the center:");
scanf("%d%d",&xc,&yc);
printf("Enter the radius:");
scanf("%d",&r);
printf("Mid Point Circle Drawing Algorithm");
draw_circle(xc,yc,r);
//outtextxy(500,200,"Mid-Point Circle Drawing Algorithm");
getch();
}

Ellipse

#include<stdio.h>
#include<graphics.h>
#include<conio.h>
void main()
{
int gd=DETECT,gm;
float p,x,y,xc,yc,a,b;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
cleardevice();
printf("Enter the Center of Elliplse xc and yc:\n");
scanf("%f%f",&xc,&yc);
printf("Enter major axis as a, and minor axis as b:\n");
scanf("%f%f",&a,&b);
printf("Ellipse Generation Algorithm");
x=0;
y=b;
//Region 1
p=(b*b)-(a*a*b)+(0.25*a*a);
do
{
putpixel(xc+x,yc+y,WHITE);
putpixel(xc+x,yc-y,WHITE);
putpixel(xc-x,yc+y,WHITE);
putpixel(xc-x,yc-y,WHITE);
if(p<0)
{
x=x+1;
p=p+2*b*b*x+b*b;
}
else
{
x=x+1;
y=y-1;
p=p+2*b*b*x-2*a*a*y+b*b;
}
}
while(2*b*b*x<2*a*a*y);
//Region 2
p=(b*b*(x+0.5)*(x+0.5))+((y-1)*(y-1)*a*a-a*a*b*b);
do
{
putpixel(xc+x,yc+y,WHITE);
putpixel(xc+x,yc-y,WHITE);
putpixel(xc-x,yc+y,WHITE);
putpixel(xc-x,yc-y,WHITE);
if(p>0)
{
y=y-1;
p=p-2*a*a*y+a*a;
}
else
{
x=x+1;
y=y-1;
p=p-2*a*a*y+2*b*b*x+a*a;
}
}
while(y!=0);
//outtextxy(300,250, “Ellipse Generation Algorithm”);
getch();
closegraph();
restorecrtmode();
}

Boundary fill

#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<dos.h>
void b_f(int x,int y, int f_color, int b_color){
if(getpixel(x,y)!=b_color && getpixel(x,y)!=f_color){
putpixel(x,y,f_color);
delay(1);
b_f(x+1,y,f_color,b_color);
b_f(x,y+1,f_color,b_color);
b_f(x-1,y,f_color,b_color);
b_f(x,y-1,f_color,b_color);
}
}
void main() {
int gd= DETECT, gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
int x,y,r;
printf("Enter the center of the circle:");
scanf("%d%d",&x,&y);
printf("Enter the radius of the circle:");
scanf("%d",&r);
circle(x,y,r);
b_f(x,y,4,15);
//printf("Press any keys");
//closegraph();
getch();
}

scan line polygon fill

#include <stdio.h>
#include <conio.h>
#include <graphics.h>
void main()
{
int n,i,j,k,gd,gm,dy,dx;
int x,y,temp;
int a[20][2],xi[20];
float slope[20];
clrscr();
printf("\n\n\tEnter the no. of edges of polygon : ");
scanf("%d",&n);
printf("\n\n\tEnter the cordinates of polygon :\n\n\n ");
for(i=0;i<n;i++)
{
printf("\tX%d Y%d : ",i,i);
scanf("%d %d",&a[i][0],&a[i][1]);
}
a[n][0]=a[0][0];
a[n][1]=a[0][1];
detectgraph(&gd,&gm);
initgraph(&gd,&gm,"C:\\TurboC3\\BGI");
/*- draw polygon -*/
for(i=0;i<n;i++)
{
line(a[i][0],a[i][1],a[i+1][0],a[i+1][1]);
}
getch();
for(i=0;i<n;i++)
{
dy=a[i+1][1]-a[i][1];
dx=a[i+1][0]-a[i][0];
if(dy==0) slope[i]=1.0;
if(dx==0) slope[i]=0.0;
if((dy!=0)&&(dx!=0)) /*- calculate inverse slope -*/
{
slope[i]=(float) dx/dy;
}
}
for(y=0;y< 480;y++)
{
k=0;
for(i=0;i<n;i++)
{
if( ((a[i][1]<=y)&&(a[i+1][1]>y))||
((a[i][1]>y)&&(a[i+1][1]<=y)))
{
xi[k]=(int)(a[i][0]+slope[i]*(y-a[i][1]));
k++;
}
}
for(j=0;j<k-1;j++) /*- Arrange x-intersections in order -*/
for(i=0;i<k-1;i++)
{
if(xi[i]>xi[i+1])
{
temp=xi[i];
xi[i]=xi[i+1];
xi[i+1]=temp;
}
}
setcolor(3);
for(i=0;i<k;i+=2)
{
line(xi[i],y,xi[i+1]+1,y);
getch();
}
}
}

2D

#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<math.h>

void Translate(int x1,int x2,int x3, int y1,int y2,int y3){
int tx,ty,xx1,xx2,xx3,yy1,yy2,yy3;
printf("Enter the Translation Parameter:");
scanf("%d%d",&tx,&ty);
xx1=x1+tx;
xx2=x2+tx;
xx3=x3+tx;
yy1=y1+ty;
yy2=y2+ty;
yy3=y3+ty;
line(xx1,yy1,xx2,yy2);
line(xx2,yy2,xx3,yy3);
line(xx3,yy3,xx1,yy1);
getch();
}

void Rotate(int x1,int x2,int x3,int y1,int y2,int y3){
int rad,xx1,xx2,xx3,yy1,yy2,yy3,r;
printf("Enter the rotation angle:");
scanf("%d",&r);
rad= (3.14*r)/180;
xx1=abs((x1*cos(rad))-(y1*sin(rad)));
yy1=abs((x1*sin(rad))+(y1*cos(rad)));
xx2=abs((x2*cos(rad))-(y2*sin(rad)));
yy2=abs((x2*sin(rad))+(y2*cos(rad)));
xx3=abs((x3*cos(rad))-(y3*sin(rad)));
yy3=abs((x3*sin(rad))+(y3*cos(rad)));
line(xx1,yy1,xx2,yy2);
line(xx2,yy2,xx3,yy3);
line(xx3,yy3,xx1,yy1);
getch();
}

void Scale(int x1,int x2,int x3,int y1,int y2,int y3){
int sx,sy,xx1,xx2,xx3,yy1,yy2,yy3;
printf("Enter the scaling Parameter:");
scanf("%d%d",&sx,&sy);
xx1=x1*sx;
xx2=x2*sx;
xx3=x3*sx;
yy1=y1*sy;
yy2=y2*sy;
yy3=y3*sy;
line(xx1,yy1,xx2,yy2);
line(xx2,yy2,xx3,yy3);
line(xx3,yy3,xx1,yy1);
getch();
}

void main(){
int gm =DETECT, gd;
initgraph(&gm,&gd,"c:\\turboc3\\bgi");
int x1,x2,x3,y1,y2,y3,r,c;
printf("Enter the coordinates of the triangle:");
scanf("%d%d%d%d%d%d",&x1,&x2,&x3,&y1,&y2,&y3);
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x1,y1);
printf("\n1.Translation\n2.Rotation\n3.Scaling\n4.Exit\n");
printf("Enter your choice:");
scanf("%d",&c);
switch(c){
case 1:
Translate(x1,x2,x3,y1,y2,y3);
break;
case 2:
Rotate(x1,x2,x3,y1,y2,y3);
break;
case 3:
Scale(x1,x2,x3,y1,y2,y3);
break;
case 4:
printf("Thankyou!!");
break;
default:
printf("Invalid Choice!!");
break; }
getch();
}

